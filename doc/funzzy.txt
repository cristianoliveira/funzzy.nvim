*funzzy.txt*  The funzzy watcher plugin for neovim

Author:  Cristian Oliveira
License: MIT

=============================================================================
CONTENTS                                                  *funzzy-contents*

   01. Intro ............................................... |funzzy-intro|
   02. Features ......................................... |funzzy-features|
   03. Commands ......................................... |funzzy-commands|
   04. Examples ......................................... |funzzy-examples|
   05. FAQ ................................................... |funzzy-faq|

=============================================================================
INTRODUCTION                                                 *funzzy-intro*

Spins up a watcher process that runs a command when a file changes. It uses
the funzzy the watcher https://github.com/cristianoliveira/funzzy so you can
either configure it by editing the .watch.yaml file or by passing an arbitrary
command, which then watch the current directory ( See: |funzzy-examples| )

=============================================================================
FEATURES                                                  *funzzy-features*

- Runs a command when a file changes
- Runs non-blocking cancelable tasks
- Can be used to run any kind of task in one config like tests, build, lint, etc.
- Can watch the current directory recursively and run arbitrary commands
- Using `{{filepath}}` allows you to compose commands that uses the changed file
- Uses a very lightweight process made with Rust

=============================================================================
COMMANDS                                                  *funzzy-commands*

                                                          *:FunzzyEdit*
:FunzzyEdit                       Opens the `.watch.yaml` file in edit mode. If
                                  the file does not exist, it will be created.

:FunzzyInit                       Alias for :FunzzyEdit
                                                          *:FunzzyClose*
:FunzzyClose                      Closes all funzzy channels for the current
                                  working directory. This IS NOT REQUIRED for
                                  cleaning up running processes before exiting vim

                                                          *:Funzzy*
:Funzzy <target>                  Watches using the `.watch.yaml` file in the
                                  current directory. you may pass a `target` to
                                  run a specific task.
                                  See more about "targeting"
                                  https://github.com/cristianoliveira/funzzy#running

                                                          *:FunzzyCmd*
:FunzzyCmd <shell-command>        Watches the current directory and runs the
                                  given shell command on each change.

=============================================================================
EXAMPLES                                                  *funzzy-examples*

 *Arbitrary_commands* - Opens the directory/file you want work and execute the
 command below, this will spin a funzzy process which will watch the directory
 where the file is and will execute the command you passed as argument

 `:FunzzyCmd echo "this file has changed {{filepath}}"`

 *Configured_tasks* - First configure the task file with `:FunzzyInit` once that
 is done execute `:Funzzy` which will spin the watcher and watch based on the
 configured tasks in `.watch.yaml`

 *Targeted_tasks* - Assuming that you have the `.watch.yaml` below if you run
 the command `:Funzzy quick` it will only load the rules that contains `quick`
 in the name
 ```
  - name: run test (quick)
    run: "echo 'foo bar baz' | sed 's/foo/FIRST/g'"
    change: "libs/**"

  - name: test the changed file (quick)
    run: "npx jest \$(echo "{{filepath}}" | sed -r 's/\.(t|j)sx?//g')"
    change: "src/**"

  - name: run e2e (slow)
    run: "webdriver"
    change: "e2e/**"
  ```
=============================================================================
FAQ                                                       *funzzy-faq*

 - How can I kill a running instance of the watcher?

 This plugin spins a process using :terminal so the simplest way is
 pressing `i` and `<C-c>` for more run `:h terminal` or use |:FunzzyClose|
 otherwise by quiting vim all running instances are going to be cleaned up.

 vim:tw=78:et:ft=help:norl:
